// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.0
// source: proto/exchange.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exchange_SubmitOrder_FullMethodName       = "/exchange.Exchange/SubmitOrder"
	Exchange_BatchSubmitOrders_FullMethodName = "/exchange.Exchange/BatchSubmitOrders"
	Exchange_CancelOrder_FullMethodName       = "/exchange.Exchange/CancelOrder"
	Exchange_ModifyOrder_FullMethodName       = "/exchange.Exchange/ModifyOrder"
	Exchange_GetOrderStatus_FullMethodName    = "/exchange.Exchange/GetOrderStatus"
	Exchange_GetTrades_FullMethodName         = "/exchange.Exchange/GetTrades"
	Exchange_GetOrderbook_FullMethodName      = "/exchange.Exchange/GetOrderbook"
	Exchange_ListSymbols_FullMethodName       = "/exchange.Exchange/ListSymbols"
	Exchange_StreamOrderbook_FullMethodName   = "/exchange.Exchange/StreamOrderbook"
	Exchange_StreamTrades_FullMethodName      = "/exchange.Exchange/StreamTrades"
	Exchange_SnapshotOrderbook_FullMethodName = "/exchange.Exchange/SnapshotOrderbook"
	Exchange_RestoreOrderbook_FullMethodName  = "/exchange.Exchange/RestoreOrderbook"
	Exchange_RateLimitStatus_FullMethodName   = "/exchange.Exchange/RateLimitStatus"
	Exchange_Health_FullMethodName            = "/exchange.Exchange/Health"
)

// ExchangeClient is the client API for Exchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeClient interface {
	// основной flow
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
	BatchSubmitOrders(ctx context.Context, in *BatchSubmitOrdersRequest, opts ...grpc.CallOption) (*BatchSubmitOrdersResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error)
	GetOrderStatus(ctx context.Context, in *GetOrderStatusRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error)
	// получение данных
	GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error)
	GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error)
	ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error)
	// стримы (server-side streaming)
	StreamOrderbook(ctx context.Context, in *StreamOrderbookRequest, opts ...grpc.CallOption) (Exchange_StreamOrderbookClient, error)
	StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (Exchange_StreamTradesClient, error)
	// админ / snapshot
	SnapshotOrderbook(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error)
	RestoreOrderbook(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
	// утилиты
	RateLimitStatus(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type exchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeClient(cc grpc.ClientConnInterface) ExchangeClient {
	return &exchangeClient{cc}
}

func (c *exchangeClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	out := new(SubmitOrderResponse)
	err := c.cc.Invoke(ctx, Exchange_SubmitOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) BatchSubmitOrders(ctx context.Context, in *BatchSubmitOrdersRequest, opts ...grpc.CallOption) (*BatchSubmitOrdersResponse, error) {
	out := new(BatchSubmitOrdersResponse)
	err := c.cc.Invoke(ctx, Exchange_BatchSubmitOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, Exchange_CancelOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ModifyOrder(ctx context.Context, in *ModifyOrderRequest, opts ...grpc.CallOption) (*ModifyOrderResponse, error) {
	out := new(ModifyOrderResponse)
	err := c.cc.Invoke(ctx, Exchange_ModifyOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOrderStatus(ctx context.Context, in *GetOrderStatusRequest, opts ...grpc.CallOption) (*GetOrderStatusResponse, error) {
	out := new(GetOrderStatusResponse)
	err := c.cc.Invoke(ctx, Exchange_GetOrderStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetTrades(ctx context.Context, in *GetTradesRequest, opts ...grpc.CallOption) (*GetTradesResponse, error) {
	out := new(GetTradesResponse)
	err := c.cc.Invoke(ctx, Exchange_GetTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) GetOrderbook(ctx context.Context, in *GetOrderbookRequest, opts ...grpc.CallOption) (*GetOrderbookResponse, error) {
	out := new(GetOrderbookResponse)
	err := c.cc.Invoke(ctx, Exchange_GetOrderbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) ListSymbols(ctx context.Context, in *ListSymbolsRequest, opts ...grpc.CallOption) (*ListSymbolsResponse, error) {
	out := new(ListSymbolsResponse)
	err := c.cc.Invoke(ctx, Exchange_ListSymbols_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) StreamOrderbook(ctx context.Context, in *StreamOrderbookRequest, opts ...grpc.CallOption) (Exchange_StreamOrderbookClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exchange_ServiceDesc.Streams[0], Exchange_StreamOrderbook_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamOrderbookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_StreamOrderbookClient interface {
	Recv() (*OrderbookUpdate, error)
	grpc.ClientStream
}

type exchangeStreamOrderbookClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamOrderbookClient) Recv() (*OrderbookUpdate, error) {
	m := new(OrderbookUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) StreamTrades(ctx context.Context, in *StreamTradesRequest, opts ...grpc.CallOption) (Exchange_StreamTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exchange_ServiceDesc.Streams[1], Exchange_StreamTrades_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeStreamTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exchange_StreamTradesClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type exchangeStreamTradesClient struct {
	grpc.ClientStream
}

func (x *exchangeStreamTradesClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exchangeClient) SnapshotOrderbook(ctx context.Context, in *SnapshotRequest, opts ...grpc.CallOption) (*SnapshotResponse, error) {
	out := new(SnapshotResponse)
	err := c.cc.Invoke(ctx, Exchange_SnapshotOrderbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) RestoreOrderbook(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := c.cc.Invoke(ctx, Exchange_RestoreOrderbook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) RateLimitStatus(ctx context.Context, in *RateLimitRequest, opts ...grpc.CallOption) (*RateLimitResponse, error) {
	out := new(RateLimitResponse)
	err := c.cc.Invoke(ctx, Exchange_RateLimitStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, Exchange_Health_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServer is the server API for Exchange service.
// All implementations must embed UnimplementedExchangeServer
// for forward compatibility
type ExchangeServer interface {
	// основной flow
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error)
	BatchSubmitOrders(context.Context, *BatchSubmitOrdersRequest) (*BatchSubmitOrdersResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error)
	GetOrderStatus(context.Context, *GetOrderStatusRequest) (*GetOrderStatusResponse, error)
	// получение данных
	GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error)
	GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error)
	ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error)
	// стримы (server-side streaming)
	StreamOrderbook(*StreamOrderbookRequest, Exchange_StreamOrderbookServer) error
	StreamTrades(*StreamTradesRequest, Exchange_StreamTradesServer) error
	// админ / snapshot
	SnapshotOrderbook(context.Context, *SnapshotRequest) (*SnapshotResponse, error)
	RestoreOrderbook(context.Context, *RestoreRequest) (*RestoreResponse, error)
	// утилиты
	RateLimitStatus(context.Context, *RateLimitRequest) (*RateLimitResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedExchangeServer()
}

// UnimplementedExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServer struct {
}

func (UnimplementedExchangeServer) SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (UnimplementedExchangeServer) BatchSubmitOrders(context.Context, *BatchSubmitOrdersRequest) (*BatchSubmitOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSubmitOrders not implemented")
}
func (UnimplementedExchangeServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedExchangeServer) ModifyOrder(context.Context, *ModifyOrderRequest) (*ModifyOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyOrder not implemented")
}
func (UnimplementedExchangeServer) GetOrderStatus(context.Context, *GetOrderStatusRequest) (*GetOrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedExchangeServer) GetTrades(context.Context, *GetTradesRequest) (*GetTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedExchangeServer) GetOrderbook(context.Context, *GetOrderbookRequest) (*GetOrderbookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderbook not implemented")
}
func (UnimplementedExchangeServer) ListSymbols(context.Context, *ListSymbolsRequest) (*ListSymbolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSymbols not implemented")
}
func (UnimplementedExchangeServer) StreamOrderbook(*StreamOrderbookRequest, Exchange_StreamOrderbookServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrderbook not implemented")
}
func (UnimplementedExchangeServer) StreamTrades(*StreamTradesRequest, Exchange_StreamTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedExchangeServer) SnapshotOrderbook(context.Context, *SnapshotRequest) (*SnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotOrderbook not implemented")
}
func (UnimplementedExchangeServer) RestoreOrderbook(context.Context, *RestoreRequest) (*RestoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreOrderbook not implemented")
}
func (UnimplementedExchangeServer) RateLimitStatus(context.Context, *RateLimitRequest) (*RateLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateLimitStatus not implemented")
}
func (UnimplementedExchangeServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedExchangeServer) mustEmbedUnimplementedExchangeServer() {}

// UnsafeExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServer will
// result in compilation errors.
type UnsafeExchangeServer interface {
	mustEmbedUnimplementedExchangeServer()
}

func RegisterExchangeServer(s grpc.ServiceRegistrar, srv ExchangeServer) {
	s.RegisterService(&Exchange_ServiceDesc, srv)
}

func _Exchange_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_SubmitOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_BatchSubmitOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSubmitOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).BatchSubmitOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_BatchSubmitOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).BatchSubmitOrders(ctx, req.(*BatchSubmitOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ModifyOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ModifyOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ModifyOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ModifyOrder(ctx, req.(*ModifyOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOrderStatus(ctx, req.(*GetOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetTrades(ctx, req.(*GetTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_GetOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderbookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).GetOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_GetOrderbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).GetOrderbook(ctx, req.(*GetOrderbookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_ListSymbols_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSymbolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).ListSymbols(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_ListSymbols_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).ListSymbols(ctx, req.(*ListSymbolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_StreamOrderbook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderbookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).StreamOrderbook(m, &exchangeStreamOrderbookServer{stream})
}

type Exchange_StreamOrderbookServer interface {
	Send(*OrderbookUpdate) error
	grpc.ServerStream
}

type exchangeStreamOrderbookServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamOrderbookServer) Send(m *OrderbookUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Exchange_StreamTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExchangeServer).StreamTrades(m, &exchangeStreamTradesServer{stream})
}

type Exchange_StreamTradesServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type exchangeStreamTradesServer struct {
	grpc.ServerStream
}

func (x *exchangeStreamTradesServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

func _Exchange_SnapshotOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).SnapshotOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_SnapshotOrderbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).SnapshotOrderbook(ctx, req.(*SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_RestoreOrderbook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).RestoreOrderbook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_RestoreOrderbook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).RestoreOrderbook(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_RateLimitStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).RateLimitStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_RateLimitStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).RateLimitStatus(ctx, req.(*RateLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exchange_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Exchange_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Exchange_ServiceDesc is the grpc.ServiceDesc for Exchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.Exchange",
	HandlerType: (*ExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitOrder",
			Handler:    _Exchange_SubmitOrder_Handler,
		},
		{
			MethodName: "BatchSubmitOrders",
			Handler:    _Exchange_BatchSubmitOrders_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Exchange_CancelOrder_Handler,
		},
		{
			MethodName: "ModifyOrder",
			Handler:    _Exchange_ModifyOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _Exchange_GetOrderStatus_Handler,
		},
		{
			MethodName: "GetTrades",
			Handler:    _Exchange_GetTrades_Handler,
		},
		{
			MethodName: "GetOrderbook",
			Handler:    _Exchange_GetOrderbook_Handler,
		},
		{
			MethodName: "ListSymbols",
			Handler:    _Exchange_ListSymbols_Handler,
		},
		{
			MethodName: "SnapshotOrderbook",
			Handler:    _Exchange_SnapshotOrderbook_Handler,
		},
		{
			MethodName: "RestoreOrderbook",
			Handler:    _Exchange_RestoreOrderbook_Handler,
		},
		{
			MethodName: "RateLimitStatus",
			Handler:    _Exchange_RateLimitStatus_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Exchange_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOrderbook",
			Handler:       _Exchange_StreamOrderbook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTrades",
			Handler:       _Exchange_StreamTrades_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/exchange.proto",
}
